const { cmd } = require('../command');
const fg = require('api-dylux');
const yts = require('yt-search');

// üé∂--------SONG-DOWNLOAD-------//
cmd({
    pattern: "song",
    alias: ["ytmp3", "splay"],
    desc: "Download songs",
    category: "download",
    filename: __filename
},
async (conn, mek, m, { from, quoted, q, reply }) => {
    try {
        if (!q) return reply("Please provide a valid song name or URL... üé∂");

        console.log("User Query:", q);

        // React with üîç and show searching text
        await conn.sendMessage(from, { react: { text: "üîç", key: mek.key } });
        reply("> Íú±·¥á·¥Ä Ä·¥Ñ ú…™…¥…¢ Íú∞·¥è Ä  è·¥è·¥ú Ä Íú±·¥è…¥…¢.. üîé");

        // Search song
        const search = await yts(q);
        console.log("Search Results:", search);

        if (!search || !search.videos || !search.videos.length) {
            return reply("No results found for the given query.");
        }

        const data = search.videos[0];
        console.log("Song Data:", data);

        const url = data.url;

        // Send song details with thumbnail
        const desc = `*‚≠ê -S·¥è…¥…¢ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö·¥á Ä- ‚≠ê*

> ·¥á…¥·¥è·¥ú…¥·¥Ñ…™…¥…¢ Íú∞·¥è Ä  è·¥è·¥ú Ä Íú±·¥è…¥…¢.. üé∂

‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚úë
‚óâ‚îÇ *1*    *·¥õ…™·¥õ ü·¥áüé∂ :* *${data.title}*
‚óâ‚îÇ *2*    *·¥õ…™·¥ç·¥á‚è∞ :* *${data.timestamp}*
‚óâ‚îÇ *3*    *·¥Ä…¢·¥èüìÜ :* *${data.ago}*
‚óâ‚îÇ *4*    *·¥†…™·¥á·¥°Íú±üîî :* *${data.views}*
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚úë

*·¥á…¥·¥ä·¥è è  è·¥è·¥ú Ä Íú±·¥è…¥…¢*

> ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥Ñ ú·¥Ä Ä·¥ú·¥ã·¥Ä ·¥ç·¥Ä ú·¥áÍú± ú`;

        await conn.sendMessage(from, { image: { url: data.thumbnail }, caption: desc }, { quoted: mek });

        // React with üì• and show downloading text
        await conn.sendMessage(from, { react: { text: "üì•", key: mek.key } });
        reply("> ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö…™…¥…¢  è·¥è·¥ú Ä ·¥è…¥·¥á.. üì•");

        // Download Song
        let downSong = await fg.yta(url);
        console.log("Download Response:", downSong);

        if (!downSong || !downSong.dl_url) {
            return reply("Failed to download song. Please try again later.");
        }

        const downloadSongUrl = downSong.dl_url;

        // React with üì§ and show uploading text
        await conn.sendMessage(from, { react: { text: "üì§", key: mek.key } });
        reply("> ·¥ú·¥ò ü·¥è·¥Ä·¥Ö…™…¥…¢  è·¥è·¥ú Ä ·¥è…¥·¥á.. üì§");

        // Send Song File
        await conn.sendMessage(from, {
            audio: { url: downloadSongUrl },
            mimetype: "audio/mp3",
            caption: `${data.title} - Song`
        }, { quoted: mek });

        // React with ‚úÖ when upload is complete
        await conn.sendMessage(from, { react: { text: "‚úÖ", key: mek.key } });
        reply("> ·¥è…¥·¥á ·¥ú·¥ò ü·¥è·¥Ä·¥Ö ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö..‚úÖ");

    } catch (e) {
        console.log(e)
        reply(`${e}`)
    }
});
